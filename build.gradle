buildscript {
	ext {
		springVersion = "2.1.5.RELEASE"
		apfloatVersion = "1.8.3"
		asmVersion = "7.1"
		commonsTextVersion = "1.6"
		commonsIOVersion = "2.6"
		commonsMathVersion = "3.6.1"
		commonsCollectionsVersion = "4.3"
		guavaVersion = "27.1-jre"
		icu4jVersion = "64.2"
		javaHelpVersion = "2.0.05"
		cfrVersion = "0.143"
	}
	repositories {
		maven { url 'http://repo.spring.io/plugins-release' }
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springVersion}"
	}
}

plugins {
	id "org.sonarqube" version "2.7.1"
}

allprojects {
	group = "jcl"
	version = "1.0-SNAPSHOT"

	configurations.all {
		resolutionStrategy {
			// fail eagerly on version conflict (includes transitive dependencies)
			// e.g. multiple different versions of the same dependency (group and name are equal)
			failOnVersionConflict()
		}
	}
}

subprojects {
	apply plugin: "java"

	apply plugin: "jacoco"
//	apply plugin: "org.sonarqube"

	configurations {
	}

	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11

	compileJava.options*.compilerArgs = [
			"-Xlint:serial", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile", "-Xlint:dep-ann", "-Xlint:divzero",
			"-Xlint:empty", "-Xlint:finally", "-Xlint:overrides", "-Xlint:path", "-Xlint:static", "-Xlint:try",
			"-Xlint:fallthrough", "-Xlint:rawtypes", "-Xlint:deprecation", "-Xlint:unchecked", "-Xlint:-options"
			//, "-Xlint:processing" , "-Werror"
	]

	compileTestJava.options*.compilerArgs = [
			"-Xlint:serial", "-Xlint:-varargs", "-Xlint:cast", "-Xlint:classfile", "-Xlint:dep-ann", "-Xlint:divzero",
			"-Xlint:empty", "-Xlint:finally", "-Xlint:overrides", "-Xlint:path", "-Xlint:static", "-Xlint:try",
			"-Xlint:-fallthrough", "-Xlint:-rawtypes", "-Xlint:-deprecation", "-Xlint:-unchecked", "-Xlint:-options"
			//, "-Xlint:processing"
	]

	compileTestJava {
		options.compilerArgs += "-parameters"
	}

	test {
		systemProperty("java.awt.headless", "true")
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		implementation enforcedPlatform("org.springframework.boot:spring-boot-dependencies:${springVersion}")
		annotationProcessor enforcedPlatform("org.springframework.boot:spring-boot-dependencies:${springVersion}")

		implementation("com.ibm.icu:icu4j:${icu4jVersion}")
		implementation("commons-io:commons-io:${commonsIOVersion}")
		implementation("com.google.guava:guava:${guavaVersion}")
		implementation("org.apache.commons:commons-text:${commonsTextVersion}")
		implementation("org.apache.commons:commons-math3:${commonsMathVersion}")
		implementation("org.apache.commons:commons-collections4:${commonsCollectionsVersion}")
		implementation("org.apfloat:apfloat:${apfloatVersion}")
		implementation("org.ow2.asm:asm:${asmVersion}")
		implementation("org.ow2.asm:asm-util:${asmVersion}")
		implementation("javax.help:javahelp:${javaHelpVersion}")
		implementation("org.benf:cfr:${cfrVersion}")
	}

	configurations {
		jacoco
	}

	jar {
		manifest.attributes["Created-By"] = "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
		manifest.attributes["Implementation-Title"] = name
		manifest.attributes["Implementation-Version"] = version

//		from("${rootProject.projectDir}/src/dist") {
//			include "license.txt"
//			include "notice.txt"
//			into "META-INF"
//			expand(copyright: new Date().format("yyyy"), version: project.version)
//		}
	}

	ext.javadocLinks = [
			"http://docs.oracle.com/javase/8/docs/api/"
	] as String[]

	javadoc {
		description = "Generates project-level javadoc for use in -javadoc jar"

		options.memberLevel = JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = project.name
		options.links(project.ext.javadocLinks)
		options.addStringOption('Xdoclint:none', '-quiet')

		// suppress warnings due to cross-module @see and @link references;
		// note that global 'api' task does display all warnings.
		logging.captureStandardError LogLevel.INFO
		logging.captureStandardOutput LogLevel.INFO // suppress "## warnings" message
	}

//	task sourcesJar(type: Jar, dependsOn: classes) {
//		classifier = 'sources'
//		from sourceSets.main.allSource
//	}

//	task javadocJar(type: Jar) {
//		classifier = "javadoc"
//		from javadoc
//	}

//	artifacts {
//		archives sourcesJar
//		archives javadocJar
//	}

	jacocoTestReport.dependsOn(test)

	sonarqube {
		properties {
			property "sonar.projectName", "JCL"
//			property "sonar.profile", "JCL"
//			property "sonar.jacoco.reportPath", "$buildDir/jacoco/test.exec"
//			property "sonar.java.coveragePlugin", "jacoco"
//
//			property "sonar.host.url", "https://sonarqube.com"
//			property "sonar.login", ""
		}
	}
}

//project("core") {
//	description = "Core"
//
//	def objenesisVersion = "2.4"
//
//	configurations {
//		jarjar
//		objenesis
//	}
//
//	task objenesisRepackJar(type: Jar) { repackJar ->
//		repackJar.baseName = "objenesis-repack"
//		repackJar.version = objenesisVersion
//
//		doLast() {
//			project.ant {
//				taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask",
//						classpath: configurations.jarjar.asPath
//				jarjar(destfile: repackJar.archivePath) {
//					configurations.objenesis.each { originalJar ->
//						zipfileset(src: originalJar)
//					}
//					// repackage org.objenesis => org.objenesis
//					rule(pattern: "org.objenesis.**", result: "org.objenesis.@1")
//				}
//			}
//		}
//	}
//
//	jar {
//		// inline repackaged cglib classes directly into the core jar
//		dependsOn objenesisRepackJar
//		from(zipTree(cglibRepackJar.archivePath)) {
//			include "org/cglib/**"
//		}
//
//		manifest.attributes["Premain-Class"] =
//				"org.instrument.InstrumentationSavingAgent"
//		manifest.attributes["Agent-Class"] =
//				"org.instrument.InstrumentationSavingAgent"
//		manifest.attributes["Can-Redefine-Classes"] = "true"
//		manifest.attributes["Can-Retransform-Classes"] = "true"
//		manifest.attributes["Can-Set-Native-Method-Prefix"] = "false"
//	}
//}
//configure(rootProject) {
//	description = "JCL"
//
//	// don't publish the default jar for the root project
//	//configurations.archives.artifacts.clear()
//
//	task api(type: Javadoc) {
//		group = "Documentation"
//		description = "Generates aggregated Javadoc API documentation."
//		title = "${rootProject.description} ${version} API"
//
//		dependsOn {
//			subprojects.collect {
//				it.tasks.getByName("jar")
//			}
//		}
//		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
//		options.author = true
//		options.header = rootProject.description
//		//options.overview = "src/api/overview.html"
//		//options.stylesheetFile = file("src/api/stylesheet.css")
//		options.splitIndex = true
//		options.links(project.ext.javadocLinks)
//		options.addStringOption('Xdoclint:none', '-quiet')
//
//		source subprojects.collect { project ->
//			project.sourceSets.main.allJava
//		}
//
//		//maxMemory = "1024m"
//		destinationDir = new File(buildDir, "api")
//
//		doFirst {
//			classpath += files(subprojects.collect { it.sourceSets.main.compileClasspath })
//		}
//	}
//}

wrapper {
	gradleVersion = '5.4.1'
}