buildscript {
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE")
	}
}

plugins {
	id "org.sonarqube" version "2.0.1"
}

ext {
}

//******************//
//apply plugin: 'java'
//apply plugin: 'application'
//apply plugin: 'spring-boot'

//jar {
//	baseName = 'jcl'
//	version = '1.0-SNAPSHOT'
//}
//******************//

configure(allprojects) { project ->
	group = "jcl"
	version = "1.0-SNAPSHOT"

	ext.commonsLangVersion = "3.4"
	ext.commonsMathVersion = "3.6.1"
	ext.commonsCollectionsVersion = "4.1"
	ext.commonsIoVersion = "2.5"

	ext.guavaVersion = "19.0"

	ext.lombokVersion = "1.16.8"

	ext.apfloatVersion = "1.8.2"

	ext.icu4jVersion = "57.1"

	ext.asmAllVersion = "5.1"

	ext.springBootVersion = "1.3.5.RELEASE"
	ext.springStatemachineVersion = "1.1.0.RELEASE"

	ext.javaHelpVersion = "2.0.05"

	apply plugin: "java"

	configurations {
	}

	compileJava.options*.compilerArgs = [
			"-Xlint:serial", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile",
			"-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
			"-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
			"-Xlint:try", "-Xlint:fallthrough", "-Xlint:rawtypes", "-Xlint:deprecation",
			"-Xlint:unchecked", "-Xlint:-options" //, "-Werror"
	]

	compileTestJava.options*.compilerArgs = [
			"-Xlint:serial", "-Xlint:-varargs", "-Xlint:cast", "-Xlint:classfile",
			"-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
			"-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
			"-Xlint:try", "-Xlint:-fallthrough", "-Xlint:-rawtypes", "-Xlint:-deprecation",
			"-Xlint:-unchecked", "-Xlint:-options"]

	compileJava {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
	}

	compileTestJava {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
		options.compilerArgs += "-parameters"
	}

	test {
//		systemProperty("java.awt.headless", "true")
//		systemProperty("testGroups", project.properties.get("testGroups"))
		//scanForTestClasses = false
//		include(["**/*Tests.class", "**/*Test.class"])
		// Since we set scanForTestClasses to false, we need to filter out inner
		// classes with the "$" pattern; otherwise, using -Dtest.single=MyTests to
		// run MyTests by itself will fail if MyTests contains any inner classes.
//		exclude(["**/Abstract*.class", '**/*$*'])
	}

	repositories {
		mavenCentral()
	}

	dependencies {
//******************//
//		compile("org.apache.commons:commons-lang3:${commonsLangVersion}")
//		compile("org.apache.commons:commons-math3:${commonsMathVersion}")
//		compile("org.apache.commons:commons-collections4:${commonsCollectionsVersion}")
//		compile("commons-io:commons-io:${commonsIoVersion}")
//
//		compile("com.google.guava:guava:${guavaVersion}")
//
//		compile("org.projectlombok:lombok:${lombokVersion}")
//
//		compile("org.apfloat:apfloat:${apfloatVersion}")
//
//		compile("com.ibm.icu:icu4j:${icu4jVersion}")
//
//		compile("org.ow2.asm:asm-all:${asmAllVersion}")
//
//		compile("org.springframework.boot:spring-boot-starter:${springBootVersion}")
//		compile("org.springframework.boot:spring-boot-loader:${springBootVersion}")
//		compile("org.springframework.statemachine:spring-statemachine-core:${springStatemachineVersion}")
//
//		compile("javax.help:javahelp:${javaHelpVersion}")
//
//		testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
//******************//
	}

	ext.javadocLinks = [
			"http://docs.oracle.com/javase/8/docs/api/"
	] as String[]
}

configure(subprojects) { subproject ->
	configurations {
		jacoco
	}

	dependencies {
		ext.jacocoVersion = "0.7.7.201606060606"
		jacoco("org.jacoco:org.jacoco.agent:${jacocoVersion}:runtime")
	}

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(':sonarqube')) {
			test.jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=jcl.*"
		}
	}

	jar {
		manifest.attributes["Created-By"] = "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
		manifest.attributes["Implementation-Title"] = subproject.name
		manifest.attributes["Implementation-Version"] = subproject.version

//		from("${rootProject.projectDir}/src/dist") {
//			include "license.txt"
//			include "notice.txt"
//			into "META-INF"
//			expand(copyright: new Date().format("yyyy"), version: project.version)
//		}
	}

	javadoc {
		description = "Generates project-level javadoc for use in -javadoc jar"

		options.memberLevel = JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = project.name
		options.links(project.ext.javadocLinks)
		options.addStringOption('Xdoclint:none', '-quiet')

		// suppress warnings due to cross-module @see and @link references;
		// note that global 'api' task does display all warnings.
		logging.captureStandardError LogLevel.INFO
		logging.captureStandardOutput LogLevel.INFO // suppress "## warnings" message
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task javadocJar(type: Jar) {
		classifier = "javadoc"
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
}

project("jcl-application") {
	description = "JCL Application"

	dependencies {
		compile(project(":jcl-core"))
		compile(project(":jcl-functions"))
		compile(project(":jcl-compiler"))

		compile("org.apache.commons:commons-lang3:${commonsLangVersion}")
		compile("org.apache.commons:commons-math3:${commonsMathVersion}")
		compile("org.apache.commons:commons-collections4:${commonsCollectionsVersion}")
		compile("commons-io:commons-io:${commonsIoVersion}")

		compile("com.google.guava:guava:${guavaVersion}")

		compile("org.projectlombok:lombok:${lombokVersion}")

		compile("org.apfloat:apfloat:${apfloatVersion}")

		compile("com.ibm.icu:icu4j:${icu4jVersion}")

		compile("org.ow2.asm:asm-all:${asmAllVersion}")

		compile("org.springframework.boot:spring-boot-starter:${springBootVersion}")
		compile("org.springframework.boot:spring-boot-loader:${springBootVersion}")
		compile("org.springframework.statemachine:spring-statemachine-core:${springStatemachineVersion}")

		compile("javax.help:javahelp:${javaHelpVersion}")

		testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
	}
}

project("jcl-compiler") {
	description = "JCL Compiler"

	dependencies {
		compile(project(":jcl-core"))
		compile(project(":jcl-functions"))

		compile("org.apache.commons:commons-lang3:${commonsLangVersion}")
		compile("org.apache.commons:commons-math3:${commonsMathVersion}")
		compile("org.apache.commons:commons-collections4:${commonsCollectionsVersion}")
		compile("commons-io:commons-io:${commonsIoVersion}")

		compile("com.google.guava:guava:${guavaVersion}")

		compile("org.projectlombok:lombok:${lombokVersion}")

		compile("org.apfloat:apfloat:${apfloatVersion}")

		compile("com.ibm.icu:icu4j:${icu4jVersion}")

		compile("org.ow2.asm:asm-all:${asmAllVersion}")

		compile("org.springframework.boot:spring-boot-starter:${springBootVersion}")
		compile("org.springframework.boot:spring-boot-loader:${springBootVersion}")
		compile("org.springframework.statemachine:spring-statemachine-core:${springStatemachineVersion}")

		compile("javax.help:javahelp:${javaHelpVersion}")

		testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
	}
}

project("jcl-core") {
	description = "JCL Core"

	dependencies {
		compile("org.apache.commons:commons-lang3:${commonsLangVersion}")
		compile("org.apache.commons:commons-math3:${commonsMathVersion}")
		compile("org.apache.commons:commons-collections4:${commonsCollectionsVersion}")
		compile("commons-io:commons-io:${commonsIoVersion}")

		compile("com.google.guava:guava:${guavaVersion}")

		compile("org.projectlombok:lombok:${lombokVersion}")

		compile("org.apfloat:apfloat:${apfloatVersion}")

		compile("com.ibm.icu:icu4j:${icu4jVersion}")

		compile("org.ow2.asm:asm-all:${asmAllVersion}")

		compile("org.springframework.boot:spring-boot-starter:${springBootVersion}")
		compile("org.springframework.boot:spring-boot-loader:${springBootVersion}")
		compile("org.springframework.statemachine:spring-statemachine-core:${springStatemachineVersion}")

		compile("javax.help:javahelp:${javaHelpVersion}")

		testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
	}
}

project("jcl-functions") {
	description = "JCL Functions"

	dependencies {
		compile(project(":jcl-core"))

		compile("org.apache.commons:commons-lang3:${commonsLangVersion}")
		compile("org.apache.commons:commons-math3:${commonsMathVersion}")
		compile("org.apache.commons:commons-collections4:${commonsCollectionsVersion}")
		compile("commons-io:commons-io:${commonsIoVersion}")

		compile("com.google.guava:guava:${guavaVersion}")

		compile("org.projectlombok:lombok:${lombokVersion}")

		compile("org.apfloat:apfloat:${apfloatVersion}")

		compile("com.ibm.icu:icu4j:${icu4jVersion}")

		compile("org.ow2.asm:asm-all:${asmAllVersion}")

		compile("org.springframework.boot:spring-boot-starter:${springBootVersion}")
		compile("org.springframework.boot:spring-boot-loader:${springBootVersion}")
		compile("org.springframework.statemachine:spring-statemachine-core:${springStatemachineVersion}")

		compile("javax.help:javahelp:${javaHelpVersion}")

		testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
	}
}

//project("core") {
//	description = "Core"
//
//	def objenesisVersion = "2.4"
//
//	configurations {
//		jarjar
//		objenesis
//	}
//
//	task objenesisRepackJar(type: Jar) { repackJar ->
//		repackJar.baseName = "objenesis-repack"
//		repackJar.version = objenesisVersion
//
//		doLast() {
//			project.ant {
//				taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask",
//						classpath: configurations.jarjar.asPath
//				jarjar(destfile: repackJar.archivePath) {
//					configurations.objenesis.each { originalJar ->
//						zipfileset(src: originalJar)
//					}
//					// repackage org.objenesis => org.objenesis
//					rule(pattern: "org.objenesis.**", result: "org.objenesis.@1")
//				}
//			}
//		}
//	}
//
//	jar {
//		// inline repackaged cglib classes directly into the core jar
//		dependsOn objenesisRepackJar
//		from(zipTree(cglibRepackJar.archivePath)) {
//			include "org/cglib/**"
//		}
//
//		manifest.attributes["Premain-Class"] =
//				"org.instrument.InstrumentationSavingAgent"
//		manifest.attributes["Agent-Class"] =
//				"org.instrument.InstrumentationSavingAgent"
//		manifest.attributes["Can-Redefine-Classes"] = "true"
//		manifest.attributes["Can-Retransform-Classes"] = "true"
//		manifest.attributes["Can-Set-Native-Method-Prefix"] = "false"
//	}
//}
//
//sonarqube {
//	properties {
//		property "sonar.projectName", "JCL"
//		property "sonar.profile", "JCL"
//		property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
//		property "sonar.java.coveragePlugin", "jacoco"
//	}
//}
//
//configure(rootProject) {
//	description = "JCL"
//
//	// don't publish the default jar for the root project
//	//configurations.archives.artifacts.clear()
//
//	task api(type: Javadoc) {
//		group = "Documentation"
//		description = "Generates aggregated Javadoc API documentation."
//		title = "${rootProject.description} ${version} API"
//
//		dependsOn {
//			subprojects.collect {
//				it.tasks.getByName("jar")
//			}
//		}
//		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
//		options.author = true
//		options.header = rootProject.description
//		//options.overview = "src/api/overview.html"
//		//options.stylesheetFile = file("src/api/stylesheet.css")
//		options.splitIndex = true
//		options.links(project.ext.javadocLinks)
//		options.addStringOption('Xdoclint:none', '-quiet')
//
//		source subprojects.collect { project ->
//			project.sourceSets.main.allJava
//		}
//
//		//maxMemory = "1024m"
//		destinationDir = new File(buildDir, "api")
//
//		doFirst {
//			classpath += files(subprojects.collect { it.sourceSets.main.compileClasspath })
//		}
//	}
//}

//********* LISP JAR GENERATION *********//

def lispSourceTree = fileTree(dir: 'src/main/lisp/jcl/compiler', include: '**/*.lisp')
def lispCompiledTree = fileTree(dir: 'compiled-lisp', include: '**/*.jar')

task cleanLispJars {
	def compiledLispDirectory = "$projectDir/compiled-lisp"
	new File(compiledLispDirectory).mkdirs();

	lispCompiledTree.each { file ->
		doLast {
			println("Removing Lisp Jar")
			println(file.absolutePath)

			file.delete()
		}
	}
}

task generateLispJars {
	def compiledLispDirectory = "$projectDir/compiled-lisp"
	new File(compiledLispDirectory).mkdirs();

	lispSourceTree.each { file ->
		doLast {
			println("Generating Lisp Jar")
			println(file.absolutePath)

			javaexec {
				main = 'jcl.system.JCL'
				classpath sourceSets.main.runtimeClasspath
				args "--compileFileSrcDir=$file.absolutePath"
				args "--compileFileDestDir=$compiledLispDirectory/"
			}
			// TODO: Fix the need to prepend a '/' to the directory name. This is a problem with the Pathname object.
			println()
		}
	}
}

task unpackLispJars {
	lispCompiledTree.each { file ->
		doLast {
			println("Unpacking Lisp Jar")
			println(file.absolutePath)

			copy {
				from zipTree(file)
				into compileJava.destinationDir
			}
		}
	}
}
//jar.dependsOn(unpackLispJars)

//********* JACOCO *********//

apply plugin: 'jacoco'
jacoco {
	toolVersion = '0.7.7.201606060606'
}
test {
	jacoco {
		destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
		classDumpFile = file("$buildDir/jacoco/classpathdumps")
	}
}
jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.destination "$buildDir/jacocoHtml"
	}
}
jacocoTestReport.dependsOn(test)

//********* SONAR *********//

apply plugin: 'org.sonarqube'
sonarqube {
	properties {
		property "sonar.host.url", "http://localhost:9000"
		property "sonar.jdbc.url", "jdbc:h2:tcp://localhost:9092/sonar"
		property "sonar.jdbc.username", "sonar"
		property "sonar.jdbc.password", "sonar"
	}
}
