buildscript {
	String springBootVersion = '1.3.5.RELEASE'
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}
plugins {
	id "org.sonarqube" version "2.0.1"
}

description = "JCL"
group = 'jcl'
version = '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'spring-boot'

compileJava {
	options.compilerArgs << "-Xlint"
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
	baseName = 'jcl'
	version = '1.0-SNAPSHOT'
}

//********* DEPENDENCIES *********//

repositories {
	mavenCentral()
}

String commonsLangVersion = '3.4'
String commonsMathVersion = '3.6.1'
String commonsCollectionsVersion = '4.1'
String commonsIoVersion = '2.5'

String guavaVersion = '19.0'

String lombokVersion = '1.16.8'

String apfloatVersion = '1.8.2'

String icu4jVersion = "57.1"

String asmAllVersion = '5.1'

String springBootVersion = '1.3.5.RELEASE'
String springStatemachineVersion = '1.1.0.RELEASE'

String javaHelpVersion = '2.0.05'

dependencies {
	compile("org.apache.commons:commons-lang3:${commonsLangVersion}")
	compile("org.apache.commons:commons-math3:${commonsMathVersion}")
	compile("org.apache.commons:commons-collections4:${commonsCollectionsVersion}")
	compile("commons-io:commons-io:${commonsIoVersion}")

	compile("com.google.guava:guava:${guavaVersion}")

	compile("org.projectlombok:lombok:${lombokVersion}")

	compile("org.apfloat:apfloat:${apfloatVersion}")

	compile("com.ibm.icu:icu4j:${icu4jVersion}")

	compile("org.ow2.asm:asm-all:${asmAllVersion}")

	compile("org.springframework.boot:spring-boot-starter:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-loader:${springBootVersion}")
	compile("org.springframework.statemachine:spring-statemachine-core:${springStatemachineVersion}")

	compile("javax.help:javahelp:${javaHelpVersion}")

	testCompile("org.springframework.boot:spring-boot-starter-test")
}

//********* LISP JAR GENERATION *********//

def lispSourceTree = fileTree(dir: 'src/main/lisp/jcl/compiler', include: '**/*.lisp')
def lispCompiledTree = fileTree(dir: 'compiled-lisp', include: '**/*.jar')

task cleanLispJars {
	def compiledLispDirectory = "$projectDir/compiled-lisp"
	new File(compiledLispDirectory).mkdirs();

	lispCompiledTree.each { file ->
		doLast {
			println("Removing Lisp Jar")
			println(file.absolutePath)

			file.delete()
		}
	}
}

task generateLispJars {
	def compiledLispDirectory = "$projectDir/compiled-lisp"
	new File(compiledLispDirectory).mkdirs();

	lispSourceTree.each { file ->
		doLast {
			println("Generating Lisp Jar")
			println(file.absolutePath)

			javaexec {
				main = 'jcl.system.JCL'
				classpath sourceSets.main.runtimeClasspath
				args "--compileFileSrcDir=$file.absolutePath"
				args "--compileFileDestDir=$compiledLispDirectory/"
			}
			// TODO: Fix the need to prepend a '/' to the directory name. This is a problem with the Pathname object.
			println()
		}
	}
}

task unpackLispJars {
	lispCompiledTree.each { file ->
		doLast {
			println("Unpacking Lisp Jar")
			println(file.absolutePath)

			copy {
				from zipTree(file)
				into compileJava.destinationDir
			}
		}
	}
}
jar.dependsOn(unpackLispJars)

//********* JACOCO *********//

apply plugin: 'jacoco'
jacoco {
	toolVersion = '0.7.7.201606060606'
}
test {
	jacoco {
		destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
		classDumpFile = file("$buildDir/jacoco/classpathdumps")
	}
}
jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.destination "$buildDir/jacocoHtml"
	}
}
jacocoTestReport.dependsOn(test)

//********* SONAR *********//

apply plugin: 'org.sonarqube'
sonarqube {
	properties {
		property "sonar.host.url", "http://localhost:9000"
		property "sonar.jdbc.url", "jdbc:h2:tcp://localhost:9092/sonar"
		property "sonar.jdbc.username", "sonar"
		property "sonar.jdbc.password", "sonar"
	}
}
