description = "JCL Application"

sourceSets {
	main {
		resources {
			srcDir 'src/main/lisp'
		}
	}
}

dependencies {
	implementation(project(":jcl-core"))
	implementation(project(":jcl-compiler"))
	implementation(project(":jcl-reader"))
	implementation(project(":jcl-functions"))

	implementation("org.apache.commons:commons-lang3")
	compileOnly("org.projectlombok:lombok")
	annotationProcessor("org.projectlombok:lombok")

	implementation("info.picocli:picocli:4.2.0")

	implementation("org.apache.logging.log4j:log4j-api")

	runtimeOnly("org.apache.logging.log4j:log4j-core")
	runtimeOnly fileTree(dir: 'compiled-lisp', include: ['*.jar'])

	testImplementation("org.junit.jupiter:junit-jupiter")
}

jar {
	manifest {
		attributes 'Main-Class': 'jcl.system.JCL'
	}
}

//def java_home = System.getenv('JAVA_HOME')
//task link(type: Exec) {
//	dependsOn 'clean'
//	dependsOn 'jar'
//
//	workingDir 'build'
//
//	commandLine "${java_home}/bin/jlink", '--module-path', "libs${File.pathSeparatorChar}${java_home}/jmods",
//			'--add-modules', 'cli', '--launcher', 'cli=cli/cli.Main', '--output', 'dist', '--strip-debug',
//			'--compress', '2', '--no-header-files', '--no-man-pages'
//}

//********* LISP JAR GENERATION *********//

//def lispSourceTree = fileTree(dir: 'src/main/lisp', include: '**/*.lisp')
def lispCompiledTree = fileTree(dir: 'compiled-lisp', include: '**/*.jar')

task cleanLispJars {
	String compiledLispDirectory = "$projectDir/compiled-lisp"
	new File(compiledLispDirectory).mkdirs()

	lispCompiledTree.each { file ->
		doLast {
			println("Removing Lisp Jar")
			println(file.absolutePath)

			file.delete()
		}
	}
}
clean.dependsOn(cleanLispJars)

def lispSourceFiles = [
		"jcl/compiler/base-macro-lambdas.lisp",
		"jcl/sequences/sequences.lisp",
		"jcl/lists/base-lists.lisp",
		"jcl/compiler/macros.lisp",
		"jcl/iterators/iterators.lisp",
		"jcl/characters/characters.lisp",
		"jcl/pathnames/pathnames.lisp",
		"jcl/symbols/symbols.lisp",
		"jcl/reader/reader.lisp",
		"jcl/strings/strings.lisp",
		"jcl/streams/streams.lisp",
		"jcl/packages/packages.lisp",
		"jcl/lists/lists.lisp",
		"jcl/numbers/numbers.lisp",
		"jcl/hashtables/hashtables.lisp",
		"jcl/environment/environment.lisp",
		"jcl/structures/structures.lisp"
]

def createLispGenerationTask(def lispSourceFile, def taskName, def dependencies) {
	return tasks.create(name: taskName, type: JavaExec, dependsOn: dependencies) {
		main = "jcl.system.JCL"
		classpath = sourceSets.main.runtimeClasspath
		args += "--compileFileSrcDir=$projectDir/src/main/lisp/${lispSourceFile}"
		args += "--compileFileDestDir=$projectDir/compiled-lisp/"
		// TODO: Fix the need to prepend a '/' to the directory name. This is a problem with the Pathname object.
	}
}

//def createJarUnpackingTask(def lispSourceFileName, def taskName, def dependencies) {
//	return tasks.create(name: taskName, type: Copy, dependsOn: dependencies) {
//		from zipTree("$projectDir/compiled-lisp/${lispSourceFileName}.jar")
//		into compileJava.destinationDir
//	}
//}

task generateLispSource(dependsOn: classes) {
//	def generationLispSourceDependencies = []
//	def unpackingLispSourceDependencies = []
	def previousGenerationTask = []
//	def previousUnpackingTask = []

	lispSourceFiles.each { lispSourceFile ->
		String lispSourceFileName = lispSourceFile.substring(
				lispSourceFile.lastIndexOf("/") + 1,
				lispSourceFile.lastIndexOf(".")
		)

		String generationTaskName = "generate-${lispSourceFileName}-Jar"
		createLispGenerationTask(lispSourceFile, generationTaskName, previousGenerationTask)
		previousGenerationTask = generationTaskName
//		generationLispSourceDependencies.add(generationTaskName)

//		String unpackingTaskName = "unpack-${lispSourceFileName}-Jar"
//		createJarUnpackingTask(lispSourceFileName, unpackingTaskName, generationLispSourceDependencies + unpackingLispSourceDependencies)
//		unpackingLispSourceDependencies.add(unpackingTaskName)
	}
	assemble.dependsOn(previousGenerationTask)
}
//assemble.dependsOn(generateLispSource)