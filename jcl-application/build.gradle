plugins {
	id 'org.springframework.boot' version '1.5.9.RELEASE'
}

description = "JCL Application"

sourceSets {
	main {
		resources {
			srcDir 'src/main/lisp'
		}
	}
}

dependencies {
	compile(project(":jcl-core"))
	compile(project(":jcl-compiler"))
	compile(project(":jcl-reader"))
	compile(project(":jcl-functions"))

	compile("org.apache.commons:commons-lang3")
	compile("org.slf4j:slf4j-api")
	compile("org.springframework.boot:spring-boot")
	compile("org.springframework.boot:spring-boot-autoconfigure")
	compile("org.springframework:spring-context")
	compile("org.springframework:spring-beans")

	runtime("org.springframework.boot:spring-boot-starter-logging")

	testCompile("junit:junit")
}

bootRepackage {
	mainClass = "jcl.system.JCL"
}

//********* LISP JAR GENERATION *********//

//def lispSourceTree = fileTree(dir: 'src/main/lisp', include: '**/*.lisp')
def lispCompiledTree = fileTree(dir: 'compiled-lisp', include: '**/*.jar')

task cleanLispJars {
	def compiledLispDirectory = "$projectDir/compiled-lisp"
	new File(compiledLispDirectory).mkdirs()

	lispCompiledTree.each { file ->
		doLast {
			println("Removing Lisp Jar")
			println(file.absolutePath)

			file.delete()
		}
	}
}

def lispSourceFiles = [
		"jcl/compiler/base-macro-lambdas.lisp",
		"jcl/compiler/macros.lisp",
		"jcl/iterators/iterators.lisp",
		"jcl/lists/lists.lisp"
]

def createLispGenerationTask(def lispSourceFile, def lispSourceFileName) {
	return tasks.create("generate-${lispSourceFileName}-Jar", JavaExec) {
		main = "jcl.system.JCL"
		classpath = sourceSets.main.runtimeClasspath
		args += "--compileFileSrcDir=$projectDir/src/main/lisp/${lispSourceFile}"
		args += "--compileFileDestDir=$projectDir/compiled-lisp/"
		// TODO: Fix the need to prepend a '/' to the directory name. This is a problem with the Pathname object.
	}
}

def createJarUnpackingTask(def lispSourceFileName) {
	return tasks.create(name: "unpack-${lispSourceFileName}-Jar",
			type: Copy,
			dependsOn: "generate-${lispSourceFileName}-Jar") {
		from zipTree("$projectDir/compiled-lisp/${lispSourceFileName}.jar")
		into compileJava.destinationDir
	}
}

task generateLispSource(dependsOn: classes) {
	lispSourceFiles.each { lispSourceFile ->
		String lispSourceFileName = lispSourceFile.substring(
				lispSourceFile.lastIndexOf("/") + 1,
				lispSourceFile.lastIndexOf(".")
		)
		createLispGenerationTask(lispSourceFile, lispSourceFileName)
		createJarUnpackingTask(lispSourceFileName)
	}
}
//jar.dependsOn(generateLispSource)