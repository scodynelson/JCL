$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
TAGBODY:

(deftest tagbody.8
  (let ((x 0))
    (tagbody
     (flet ((%f (y) (setq x y) (go a)))
       (%f 10))
     (setq x 1)
     a)
    x)
  10)

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
LAMBDA:

(deftest lambda.63
  (let ((y :bad1))
    (declare (ignore y))
    (let ((y :bad2))
      (declare (special y))
      (flet ((%f () y))
        ((lambda (x &aux (y :good))
           (declare (special y) (ignore x))
           (%f))
         nil))))
  :good)

// The below works. Why should the above one work??? Hmm...
(deftest lambda.63
  (let ((y :bad1))
    (declare (ignore y))
    (let ((y :bad2))
      (declare (special y))
      (flet ((%f () (declare (special y)) y))
        ((lambda (x &aux (y :good))
           (declare (special y) (ignore x))
           (%f))
         nil))))
  :good)

(deftest lambda.57
  ((lambda (#1=#:foo) #1#) 17)
  17)

(deftest lambda.58
  ((lambda (&rest #1=#:foo) #1#) 'a 'b 'c)
  (a b c))

(deftest lambda.59
  ((lambda (&optional #1=#:foo) #1#))
  nil)

(deftest lambda.60
  ((lambda (&optional (#1=#:foo t)) #1#))
  t)

(deftest lambda.61
  ((lambda (&optional (#1=#:foo t)) #1#) 'bar)
  bar)

(deftest lambda.62
  ((lambda (&key #1=#:foo) #1#) :foo 12)
  12)

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
FLET:

(deftest flet.7
  (flet ((%f (x) x))
    (flet ((%f (y) (%f 20)))
      (%f 15)))
  20)

(deftest flet.17
  (flet (((setf %f) (x y) (setf (car y) x)))
    (let ((z (list 1 2)))
      (setf (%f z) 'a)
      z))
  (a 2))

(deftest flet.69
  (let ((*x* 0))
    (declare (special *x*))
    (flet ((%f (i)
               #'(lambda (arg)
                   (declare (ignore arg))
                   (setq *x* (1+ i)))))
      (values
       (funcall (%f 1) nil)
       (funcall (%f 2) nil))))
  2 3)

// TODO: These next two need to be tested when we support macro-lambdas and compiler-macros.
(defmacro flet.73 () :bad)
(deftest flet.73
   (flet ((flet.73 () :good))
     (flet.73))
   :good)

(define-compiler-macro flet.74 (&whole form) :bad)
(deftest flet.74
   (flet ((flet.74 () :good))
     (flet.74))
   :good)

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
LABELS:

// NOTE: Just need to figure out how to test this...
;;; The function is visible inside itself
(deftest labels.7
  (labels ((%f (x n) (cond ((eql n 0) x)
                           (t (%f (+ x n) (1- n))))))
    (%f 0 10))
  55)

(deftest labels.17
  (labels (((setf %f) (x y) (setf (car y) x)))
    (let ((z (list 1 2)))
      (setf (%f z) 'a)
      z))
  (a 2))

// TODO: These next two need to be tested when we support macro-lambdas and compiler-macros.
(defmacro labels.51 () :bad)
(deftest labels.51
   (labels ((labels.51 () :good))
      (labels.51))
   :good)

(define-compiler-macro labels.52 (&whole form) :bad)
(deftest labels.52
   (labels ((labels.52 () :good))
     (labels.52))
   :good)
