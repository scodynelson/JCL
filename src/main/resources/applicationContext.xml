<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2011-2014 Cody Nelson - All rights reserved.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:integration="http://www.springframework.org/schema/integration"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
                           http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd">

	<!-- Printer -->

	<util:map id="printerStrategies"
	          key-type="java.lang.Class"
	          value-type="jcl.printer.LispPrinter">

		<entry key="jcl.arrays.ArrayStruct" value-ref="arrayStructPrinter"/>
		<entry key="jcl.arrays.BitVectorStruct" value-ref="bitVectorStructPrinter"/>
		<entry key="jcl.arrays.StringStruct" value-ref="stringStructPrinter"/>
		<entry key="jcl.arrays.VectorStruct" value-ref="vectorStructPrinter"/>

		<entry key="jcl.characters.CharacterStruct" value-ref="characterStructPrinter"/>

		<entry key="jcl.compiler.real.struct.ValuesStruct" value-ref="valuesStructPrinter"/>

		<entry key="jcl.hashtables.HashTableStruct" value-ref="hashTableStructPrinter"/>
		<entry key="jcl.hashtables.HashTableStruct.KeyWrapper" value-ref="hashTableKeyWrapperPrinter"/>

		<entry key="jcl.java.JavaClassStruct" value-ref="javaClassStructPrinter"/>
		<entry key="jcl.java.JavaMethodStruct" value-ref="javaMethodStructPrinter"/>
		<entry key="jcl.java.JavaObjectStruct" value-ref="javaObjectStructPrinter"/>

		<entry key="jcl.lists.ConsStruct" value-ref="consStructPrinter"/>
		<entry key="jcl.lists.NullStruct" value-ref="nullStructPrinter"/>

		<entry key="jcl.numbers.ComplexStruct" value-ref="complexStructPrinter"/>
		<entry key="jcl.numbers.FloatStruct" value-ref="floatStructPrinter"/>
		<entry key="jcl.numbers.IntegerStruct" value-ref="integerStructPrinter"/>
		<entry key="jcl.numbers.RatioStruct" value-ref="ratioStructPrinter"/>

		<entry key="jcl.packages.PackageStruct" value-ref="packageStructPrinter"/>

		<entry key="jcl.pathnames.PathnameStruct" value-ref="pathnameStructPrinter"/>

		<entry key="jcl.reader.macrofunction.CommentStruct" value-ref="commentStructPrinter"/>

		<entry key="jcl.streams.EchoStreamStruct" value-ref="echoStreamStructPrinter"/>
		<entry key="jcl.streams.SynonymStreamStruct" value-ref="synonymStreamStructPrinter"/>
		<entry key="jcl.streams.TwoWayStreamStruct" value-ref="twoWayStreamStructPrinter"/>

		<entry key="jcl.structures.StructureObjectStruct" value-ref="structureObjectStructPrinter"/>

		<entry key="jcl.symbols.SymbolStruct" value-ref="symbolStructPrinter"/>

	</util:map>

	<!-- Semantic Analyzer -->

	<util:map id="goStructFactoryStrategies"
	          key-type="java.lang.Class"
	          value-type="jcl.compiler.real.struct.specialoperator.go.GoStructFactory">

		<entry key="jcl.symbols.SymbolStruct" value-ref="goSymbolStructFactory"/>
		<entry key="jcl.numbers.IntegerStruct" value-ref="goIntegerStructFactory"/>

	</util:map>

	<!-- Intermediate Code Generator -->

	<integration:payload-type-router input-channel="generationRequestChannel">
		<integration:mapping type="jcl.arrays.StringStruct" channel="stringGenerationChannel"/>
		<integration:mapping type="jcl.compiler.real.struct.specialoperator.lambda.LambdaStruct" channel="lambdaGenerationChannel"/>
	</integration:payload-type-router>

	<integration:service-activator input-channel="stringGenerationChannel" output-channel="generationReplyChannel"
	                               expression="@stringCodeGeneratorSA.generate(payload, headers.get('generatorState'))"/>
	<integration:service-activator input-channel="lambdaGenerationChannel" output-channel="generationReplyChannel"
	                               expression="@lambdaCodeGeneratorSA.generate(payload, headers.get('generatorState'))"/>

	<util:map id="codeGeneratorStrategies"
	          key-type="java.lang.Class"
	          value-type="jcl.compiler.real.icg.CodeGenerator">

		<entry key="jcl.arrays.ArrayStruct" value-ref="arrayCodeGenerator"/>
		<entry key="jcl.arrays.BitVectorStruct" value-ref="bitVectorCodeGenerator"/>
		<entry key="jcl.arrays.StringStruct" value-ref="stringCodeGenerator"/>
		<entry key="jcl.arrays.VectorStruct" value-ref="vectorCodeGenerator"/>

		<entry key="jcl.characters.CharacterStruct" value-ref="characterCodeGenerator"/>

		<entry key="jcl.compiler.real.struct.ValuesStruct" value-ref="valuesCodeGenerator"/>

		<entry key="jcl.lists.NullStruct" value-ref="nullCodeGenerator"/>
		<entry key="jcl.lists.ConsStruct" value-ref="consCodeGenerator"/>

		<entry key="jcl.numbers.ComplexStruct" value-ref="complexCodeGenerator"/>
		<entry key="jcl.numbers.FloatStruct" value-ref="floatCodeGenerator"/>
		<entry key="jcl.numbers.IntegerStruct" value-ref="integerCodeGenerator"/>
		<entry key="jcl.numbers.RatioStruct" value-ref="ratioCodeGenerator"/>

		<entry key="jcl.pathnames.PathnameStruct" value-ref="pathnameCodeGenerator"/>

		<entry key="jcl.symbols.KeywordStruct" value-ref="keywordCodeGenerator"/>
		<entry key="jcl.symbols.NILStruct" value-ref="NILCodeGenerator"/>
		<entry key="jcl.symbols.SymbolStruct" value-ref="symbolValueCodeGenerator"/>
		<entry key="jcl.symbols.TStruct" value-ref="TCodeGenerator"/>

		<entry key="jcl.compiler.real.struct.specialoperator.BlockStruct" value-ref="blockCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.CatchStruct" value-ref="catchCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.SymbolFunctionCallStruct" value-ref="symbolFunctionCallCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.IfStruct" value-ref="ifCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.InnerLambdaStruct" value-ref="innerLambdaCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.LambdaCompilerFunctionStruct" value-ref="lambdaFunctionCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.LambdaFunctionCallStruct" value-ref="lambdaFunctionCallCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.LetStruct" value-ref="letCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.LetStarStruct" value-ref="letStarCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.LocallyStruct" value-ref="locallyCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.MultipleValueCallStruct" value-ref="multipleValueCallCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.MultipleValueProg1Struct" value-ref="multipleValueProg1CodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.PrognStruct" value-ref="prognCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.ProgvStruct" value-ref="progvCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.QuoteStruct" value-ref="quoteCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.ReturnFromStruct" value-ref="returnFromCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.SetqStruct" value-ref="setqCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.SymbolCompilerFunctionStruct" value-ref="symbolFunctionCodeGenerator"/>
		<!--<entry key="jcl.compiler.real.struct.specialoperator.SymbolMacroletStruct" value-ref="symbolMacroletCodeGenerator"/>-->
		<entry key="jcl.compiler.real.struct.specialoperator.TagbodyStruct" value-ref="tagbodyCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.TheStruct" value-ref="theCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.ThrowStruct" value-ref="throwCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.UnwindProtectStruct" value-ref="unwindProtectCodeGenerator"/>

		<!--<entry key="jcl.compiler.real.struct.specialoperator.declare.DeclareStruct" value-ref=""/>-->

		<entry key="jcl.compiler.real.struct.specialoperator.defstruct.DefstructStruct" value-ref="defstructCodeGenerator"/>

		<entry key="jcl.compiler.real.struct.specialoperator.go.GoIntegerStruct" value-ref="goCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.go.GoSymbolStruct" value-ref="goCodeGenerator"/>

		<entry key="jcl.compiler.real.struct.specialoperator.lambda.LambdaStruct" value-ref="lambdaCodeGenerator"/>

	</util:map>

</beans>