<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2011-2014 Cody Nelson - All rights reserved.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- Printer -->

	<util:map id="printerStrategies"
	          key-type="java.lang.Class"
	          value-type="jcl.printer.LispPrinter">

		<entry key="jcl.arrays.ArrayStruct" value-ref="arrayStructPrinter"/>
		<entry key="jcl.arrays.BitVectorStruct" value-ref="bitVectorStructPrinter"/>
		<entry key="jcl.arrays.StringStruct" value-ref="stringStructPrinter"/>
		<entry key="jcl.arrays.VectorStruct" value-ref="vectorStructPrinter"/>

		<entry key="jcl.characters.CharacterStruct" value-ref="characterStructPrinter"/>

		<entry key="jcl.hashtables.HashTableStruct" value-ref="hashTableStructPrinter"/>
		<entry key="jcl.hashtables.HashTableStruct.KeyWrapper" value-ref="hashTableKeyWrapperPrinter"/>

		<entry key="jcl.lists.ConsStruct" value-ref="consStructPrinter"/>
		<entry key="jcl.lists.NullStruct" value-ref="nullStructPrinter"/>

		<entry key="jcl.numbers.ComplexStruct" value-ref="complexStructPrinter"/>
		<entry key="jcl.numbers.FloatStruct" value-ref="floatStructPrinter"/>
		<entry key="jcl.numbers.IntegerStruct" value-ref="integerStructPrinter"/>
		<entry key="jcl.numbers.RatioStruct" value-ref="ratioStructPrinter"/>

		<entry key="jcl.packages.PackageStruct" value-ref="packageStructPrinter"/>

		<entry key="jcl.pathnames.PathnameStruct" value-ref="pathnameStructPrinter"/>

		<entry key="jcl.reader.macrofunction.CommentStruct" value-ref="commentStructPrinter"/>

		<entry key="jcl.streams.EchoStreamStruct" value-ref="echoStreamStructPrinter"/>
		<entry key="jcl.streams.SynonymStreamStruct" value-ref="synonymStreamStructPrinter"/>
		<entry key="jcl.streams.TwoWayStreamStruct" value-ref="twoWayStreamStructPrinter"/>

		<entry key="jcl.symbols.Constant" value-ref="symbolStructPrinter"/>
		<entry key="jcl.symbols.Declaration" value-ref="symbolStructPrinter"/>
		<entry key="jcl.symbols.KeywordSymbolStruct" value-ref="symbolStructPrinter"/>
		<entry key="jcl.symbols.SymbolStruct" value-ref="symbolStructPrinter"/>
		<entry key="jcl.symbols.SpecialOperator" value-ref="symbolStructPrinter"/>
		<entry key="jcl.symbols.TStruct" value-ref="symbolStructPrinter"/>
		<entry key="jcl.symbols.NILStruct" value-ref="symbolStructPrinter"/>
		<entry key="jcl.symbols.Variable" value-ref="symbolStructPrinter"/>

	</util:map>

	<!-- Semantic Analyzer -->

	<util:map id="goStructGeneratorStrategies"
	          key-type="java.lang.Class"
	          value-type="jcl.compiler.real.struct.specialoperator.go.GoStructGenerator">

		<entry key="jcl.symbols.SymbolStruct" value-ref="goSymbolStructGenerator"/>
		<entry key="jcl.numbers.IntegerStruct" value-ref="goIntegerStructGenerator"/>

	</util:map>

	<!-- Intermediate Code Generator -->

	<util:map id="codeGeneratorStrategies"
	          key-type="java.lang.Class"
	          value-type="jcl.compiler.real.icg.generator.CodeGenerator">

		<entry key="jcl.characters.CharacterStruct" value-ref="characterCodeGenerator"/>

		<entry key="jcl.lists.ConsStruct" value-ref="listCodeGenerator"/>
		<entry key="jcl.lists.NullStruct" value-ref="nullCodeGenerator"/>

		<!--<entry key="jcl.numbers.ComplexStruct" value-ref="complexCodeGenerator"/>-->
		<entry key="jcl.numbers.FloatStruct" value-ref="floatCodeGenerator"/>
		<entry key="jcl.numbers.IntegerStruct" value-ref="integerCodeGenerator"/>
		<entry key="jcl.numbers.RatioStruct" value-ref="ratioCodeGenerator"/>

		<entry key="jcl.symbols.NILStruct" value-ref="NILCodeGenerator"/>
		<entry key="jcl.symbols.SymbolStruct" value-ref="symbolCodeGenerator"/>
		<entry key="jcl.symbols.TStruct" value-ref="TCodeGenerator"/>

		<!--<entry key="jcl.compiler.real.struct.functioncall.FunctionCallStruct" value-ref=""/>-->
		<!--<entry key="jcl.compiler.real.struct.functioncall.LambdaFunctionCallStruct" value-ref=""/>-->

		<entry key="jcl.compiler.real.struct.specialoperator.BlockStruct" value-ref="blockCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.CatchStruct" value-ref="catchCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.FletStruct" value-ref="fletCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.IfStruct" value-ref="ifCodeGenerator"/>
		<!--<entry key="jcl.compiler.real.struct.specialoperator.ImmutableLoadTimeValueStruct" value-ref=""/>-->
		<entry key="jcl.compiler.real.struct.specialoperator.LabelsStruct" value-ref="labelsCodeGenerator"/>
		<!--<entry key="jcl.compiler.real.struct.specialoperator.LambdaCompilerFunctionStruct" value-ref=""/>-->
		<entry key="jcl.compiler.real.struct.specialoperator.LetStruct" value-ref="letCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.LocallyStruct" value-ref="locallyCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.MacroletStruct" value-ref="macroletCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.MultipleValueCallStruct" value-ref="multipleValueCallCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.MultipleValueProg1Struct" value-ref="multipleValueProg1CodeGenerator"/>
		<!--<entry key="jcl.compiler.real.struct.specialoperator.MutableLoadTimeValueStruct" value-ref=""/>-->
		<entry key="jcl.compiler.real.struct.specialoperator.PrognStruct" value-ref="prognCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.ProgvStruct" value-ref="progvCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.QuoteStruct" value-ref="quoteCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.ReturnFromStruct" value-ref="returnFromCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.SetqStruct" value-ref="setqCodeGenerator"/>
		<!--<entry key="jcl.compiler.real.struct.specialoperator.SymbolCompilerFunctionStruct" value-ref=""/>-->
		<entry key="jcl.compiler.real.struct.specialoperator.SymbolMacroletStruct" value-ref="symbolMacroletCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.TagbodyStruct" value-ref="tagbodyCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.TheStruct" value-ref="theCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.ThrowStruct" value-ref="throwCodeGenerator"/>
		<entry key="jcl.compiler.real.struct.specialoperator.UnwindProtectStruct" value-ref="unwindProtectCodeGenerator"/>

		<!--<entry key="jcl.compiler.real.struct.specialoperator.declare.DeclareStruct" value-ref=""/>-->

		<!--<entry key="jcl.compiler.real.struct.specialoperator.go.GoIntegerStruct" value-ref=""/>-->
		<!--<entry key="jcl.compiler.real.struct.specialoperator.go.GoSymbolStruct" value-ref=""/>-->

		<entry key="jcl.compiler.real.struct.specialoperator.lambda.LambdaStruct" value-ref="lambdaCodeGenerator"/>

	</util:map>

</beans>